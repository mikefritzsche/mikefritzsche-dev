version: 2.1

orbs:
  slack: circleci/slack@4.6.0  # Correct version of the Slack Orb

executors:
  node-executor:
    docker:
      - image: cimg/node:18.17

jobs:
  build:
    executor: node-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Install jq and semver
          command: |
            sudo apt-get update && sudo apt-get install -y jq
            npm install semver
      - run:
          name: Determine Next Semantic Version
          command: |
            set -e
            git fetch --tags
            CURRENT_VERSION=$(git tag --list "v*" | sort -V | tail -n1)
            echo "CURRENT_VERSION=${CURRENT_VERSION}"
            if [ -z "$CURRENT_VERSION" ]; then
              NEW_VERSION="v1.0.0"
            else
              NEW_VERSION=$(npx semver -i patch "${CURRENT_VERSION}")
            fi
            echo "NEW_VERSION=${NEW_VERSION}" >> build.env
            echo "New version determined: ${NEW_VERSION}"
      - run:
          name: Build Docker image
          command: |
            source build.env
            echo "Docker Image: ${DOCKER_USERNAME}/mikefritzsche-dev:${NEW_VERSION}"
            docker build -t ${DOCKER_USERNAME}/mikefritzsche-dev:${NEW_VERSION} .
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            docker push ${DOCKER_USERNAME}/mikefritzsche-dev:${NEW_VERSION}
      - persist_to_workspace:
          root: .
          paths:
            - build.env  # Persist the environment variable to the workspace
      - slack/notify:
          event: pass
          template: basic_success
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Build Success*: Docker Image ${DOCKER_USERNAME}/mikefritzsche-dev:${NEW_VERSION} has been built and pushed successfully."
                  }
                }
              ]
            }
      - slack/notify:
          event: fail
          template: basic_fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Build Failed*: The build process failed. Please check the logs for more details."
                  }
                }
              ]
            }

  deploy:
    executor: node-executor
    steps:
      - checkout  # Ensures the directory is a Git repository
      - attach_workspace:
          at: .
      - run:
          name: Configure Git with HTTPS
          command: |
            git config --global user.email "ci@example.com"
            git config --global user.name "CircleCI"
            git remote set-url origin https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git
      - run:
          name: Deploy to DigitalOcean
          command: |
            source build.env  # Load the NEW_VERSION variable
            TIMESTAMP=$(date "+%Y-%m-%d %H:%M:%S")
            ssh -o StrictHostKeyChecking=no $DO_SSH_USER@$DO_MIKE_SERVER_IP "
              docker pull ${DOCKER_USERNAME}/mikefritzsche-dev:${NEW_VERSION} &&
              docker stop mikefritzsche-dev-react-app || true &&
              docker rm mikefritzsche-dev-react-app || true &&
              docker run -d --name mikefritzsche-dev-react-app \
                --label traefik.enable=true \
                --label traefik.http.routers.prod-mikefritzsche-react-app.rule=Host\\(\\\`dev.mikefritzsche.com\\\`\\) \
                --label traefik.http.routers.prod-mikefritzsche-react-app.entrypoints=websecure \
                --label traefik.http.services.prod-mikefritzsche-react-app.loadbalancer.server.port=80 \
                --network proxy \
                ${DOCKER_USERNAME}/mikefritzsche-dev:${NEW_VERSION} \
              && echo '[${TIMESTAMP}] Deployed image with version: ${NEW_VERSION}' >> /home/mikefritzsche/app/main-dev/deployment-log.txt
            "
      - run:
          name: Create Git Tag and Push
          command: |
            source build.env
            git tag "${NEW_VERSION}"
            git push https://${GITHUB_TOKEN}:x-o​⬤
